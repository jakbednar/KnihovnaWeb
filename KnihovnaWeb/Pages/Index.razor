@using System.Reflection.Metadata.Ecma335
@using KnihovnaWeb.Managers
@using KnihovnaWeb.Models

@page "/"

<style>
    * {
        box-sizing: border-box;
    }

    body {
        font-family: "Segoe UI", sans-serif;
    }

    h1 {
        font-size: 2rem;
        margin-bottom: 10px;
    }

    .form-container,
    .search-container {
        margin-bottom: 20px;
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
        align-items: center;
    }

    input {
        padding: 10px;
        border-radius: 6px;
        border: 1px solid #ccc;
        width: 100%;
        max-width: 250px;
        font-size: 1rem;
    }

    button {
        padding: 10px 16px;
        border: none;
        border-radius: 6px;
        background-color: #007bff;
        color: white;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.2s ease-in-out;
    }

    button:hover {
        background-color: #0056b3;
    }

    .book-list {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: center;
    }

    .book-card {
        border: 1px solid #ccc;
        border-radius: 10px;
        width: 100%;
        max-width: 260px;
        padding: 20px;
        box-shadow: 2px 2px 10px rgba(0,0,0,0.05);
        background-color: #ffffff;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .book-card h3 {
        margin: 0 0 8px 0;
        font-size: 1.2rem;
        color: #333;
    }

    .book-card p {
        margin: 4px 0;
        font-size: 0.95rem;
        color: #555;
    }

    .button-row {
        display: flex;
        gap: 10px;
        margin-top: 10px;
    }

    .button-row button {
        flex: 1;
        padding: 10px 0;
        border: none;
        border-radius: 6px;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.2s ease-in-out;
        color: white;
    }

    .edit-btn {
        background-color: #007bff;
    }

    .edit-btn:hover {
        background-color: #0056b3;
    }

    .cancel-btn {
        background-color: #6c757d;
    }

    .cancel-btn:hover {
        background-color: #5a6268;
    }

    .delete-btn {
        background-color: #dc3545;
    }

    .delete-btn:hover {
        background-color: #a71d2a;
    }

    hr {
        margin: 30px 0;
        border: none;
        border-top: 2px solid #eee;
    }
</style>


<h1>Knihovna</h1>

<h3>Přidat knihu</h3>
<div class="form-container">
    <input placeholder="Název" @bind="newTitle"/>
    <input placeholder="Autor" @bind="newAuthor"/>
    <button @onclick="AddBook">Přidat knihu</button>
</div>

<hr />

<div class="search-container">
    <input @bind="searchTitle" placeholder="Hledat podle názvu…" />
    <button @onclick="FilterBooks">Vyhledat</button>
</div>

@if (filteredBooks.Count == 0)
{
    <p>Žádné knihy neodpovídají filtru.</p>
}
else
{
    <div class="book-list">
        @foreach (var book in filteredBooks)
        {
            <div class="book-card">
                @if (editingBookId == book.BookId)
                {
                    <h3>Upravuješ: <em>@book.Title</em></h3>
                    <input placeholder="Název" @bind="newTitle" />
                    <input placeholder="Autor" @bind="newAuthor" />

                    <div class="button-row">
                        <button class="edit-btn" @onclick="SaveBookEdit">Uložit</button>
                        <button class="cancel-btn" @onclick="CancelEdit">Zrušit</button>
                    </div>
                }
                else
                {
                    <h3>@book.Title</h3>
                    <p><strong>Autor:</strong> @book.Author</p>
                    <p><strong>ID:</strong> @book.BookId</p>
                    <div class="button-row">
                        <button class="edit-btn" @onclick="() => EditBook(book.BookId)">Upravit</button>
                        <button class="delete-btn" @onclick="() => RemoveBook(book.BookId)" style="background-color: #dc3545; margin-left: 5px;">Odstranit</button>
                    </div>
                    }
            </div>

        }
    </div>
}

@code {
    BookManager manager;
    string newTitle = string.Empty;
    string newAuthor = string.Empty;
    string searchTitle = string.Empty;
    List<Book> filteredBooks = new();
    int? editingBookId = null;

    protected override void OnInitialized()
    {
        manager = new BookManager();
        filteredBooks = manager.books;
    }

    void AddBook()
    {
        manager.books.Add(new Book(manager.NextId(), newTitle, newAuthor));
        newTitle = string.Empty;
        newAuthor = string.Empty;
    }

    void RemoveBook(int id)
    {
        Book bookToRemove = manager.books.FirstOrDefault(b => b.BookId == id);
        if (bookToRemove != null)
        {
            manager.books.Remove(bookToRemove);
        }
    }

    void EditBook(int id)
    {
        editingBookId = id;

        var book = manager.books.FirstOrDefault(b => b.BookId == id);
        if (book != null)
        {
            newTitle = book.Title;
            newAuthor = book.Author;
        }
    }

    void SaveBookEdit()
    {
        var book = manager.books.FirstOrDefault(b => b.BookId == editingBookId);
        if (book != null)
        {
            book.Title = newTitle;
            book.Author = newAuthor;
        }

        newTitle = string.Empty;
        newAuthor = string.Empty;
        editingBookId = null;
    }
    
    void CancelEdit()
    {
        newTitle = string.Empty;
        newAuthor = string.Empty;
        editingBookId = null;
    }

    void FilterBooks()
    {
        if (string.IsNullOrWhiteSpace(searchTitle))
        {
            filteredBooks = manager.books;
        }
        else
        {
            filteredBooks = manager.books
                .Where(b => b.Title.Contains(searchTitle, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }
}